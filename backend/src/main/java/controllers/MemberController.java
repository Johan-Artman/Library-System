package controllers;

import classes.LibraryStoreManager;
import classes.Member;
import classes.CurrentDate;
import exceptions.MemberBannedException;
import exceptions.MemberExistsException;
import interfaces.MemberType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.List;

@RestController
@RequestMapping("/api/members")
@CrossOrigin(origins = {"http://localhost:4200", "http://localhost:4201", "http://127.0.0.1:4200", "http://127.0.0.1:4201"})
public class MemberController {
    
    private final LibraryStoreManager libraryManager;
    
    public MemberController() {
        this.libraryManager = new LibraryStoreManager(new CurrentDate());
    }
    
    @GetMapping
    public ResponseEntity<?> getAllMembers() {
        try {
            List<Member> members = libraryManager.getAllMembers();
            return ResponseEntity.ok(members);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("{\"error\": \"Internal server error\"}");
        }
    }
    
    @PostMapping
    public ResponseEntity<?> addMember(@RequestBody MemberRequest memberRequest) {
        try {
            // Convert MemberType enum to int
            int memberTypeInt = memberRequest.getMemberType().ordinal() + 1; // Assuming enum starts at 0, but DB starts at 1
            
            Member member = new Member(
                0, // ID will be auto-generated by database
                memberRequest.getFirstname(),
                memberRequest.getLastname(),
                memberTypeInt,
                memberRequest.getSocSecNr()
            );
            libraryManager.addMember(member);
            return ResponseEntity.ok().body("{\"message\": \"Member added successfully\", \"id\": " + member.getId() + "}");
        } catch (MemberExistsException | MemberBannedException e) {
            return ResponseEntity.badRequest().body("{\"error\": \"" + e.getMessage() + "\"}");
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("{\"error\": \"Internal server error\"}");
        }
    }
    
    @GetMapping("/{memberId}")
    public ResponseEntity<?> getMember(@PathVariable int memberId) {
        try {
            Optional<Member> member = libraryManager.getMemberById(memberId);
            if (member.isPresent()) {
                return ResponseEntity.ok(member.get());
            }
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("{\"error\": \"Internal server error\"}");
        }
    }
    
    @DeleteMapping("/{memberId}")
    public ResponseEntity<?> removeMember(@PathVariable int memberId) {
        try {
            libraryManager.removeMember(memberId);
            return ResponseEntity.ok().body("{\"message\": \"Member removed successfully\"}");
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("{\"error\": \"Internal server error\"}");
        }
    }
    
    @GetMapping("/{memberId}/suspended")
    public ResponseEntity<Boolean> isMemberSuspended(@PathVariable int memberId) {
        try {
            boolean suspended = libraryManager.isSuspendedMember(memberId);
            return ResponseEntity.ok(suspended);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }
    
    // DTO class for member requests
    public static class MemberRequest {
        private String firstname;
        private String lastname;
        private MemberType memberType;
        private String socSecNr;
        
        // Getters and setters
        public String getFirstname() { return firstname; }
        public void setFirstname(String firstname) { this.firstname = firstname; }
        
        public String getLastname() { return lastname; }
        public void setLastname(String lastname) { this.lastname = lastname; }
        
        public MemberType getMemberType() { return memberType; }
        public void setMemberType(MemberType memberType) { this.memberType = memberType; }
        
        public String getSocSecNr() { return socSecNr; }
        public void setSocSecNr(String socSecNr) { this.socSecNr = socSecNr; }
    }
}